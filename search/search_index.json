{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"QA Automation for Python","text":"<p>Modular Python packages for maintainable, BDD-style automated tests with <code>pytest</code>, <code>Hamcrest</code>, <code>Allure</code> reporting, and configurable logging.</p> <p>Technology-agnostic; example REST and Selenium implementations included.</p>"},{"location":"#project-structure","title":"\ud83d\udce6 Project Structure","text":"<pre><code>qa-automation-python/\n\u251c\u2500\u2500 qa-testing-utils/        # Shared low-level utility functions\n\u251c\u2500\u2500 qa-pytest-commons/       # Technology-agnostic test infrastructure\n\u251c\u2500\u2500 qa-pytest-rest/          # REST-specific steps and config\n\u251c\u2500\u2500 qa-pytest-webdriver/     # Selenium-specific implementation\n\u251c\u2500\u2500 qa-pytest-template/      # Cookiecutter project template\n\u251c\u2500\u2500 qa-pytest-examples/      # Usage examples for application test projects\n\u251c\u2500\u2500 pyproject.toml           # Root environment definition for PDM\n\u2514\u2500\u2500 .vscode/                 # Recommended settings for VSCode integration\n</code></pre>"},{"location":"#architecture","title":"Architecture","text":"<p>Support for additional technologies, e.g. RabbitMQ, can be added by sub-classing these classes and adding specific steps, setup/teardown, and configuration. This allows reusing the basic configuration, reporting, logging, and retrying mechanisms. Further, application tests, steps, and configurations reuse by subclassing from technologies.</p> <pre><code>flowchart TD\n    A[Tests: Define BDD scenarios as series of steps, also define specific setup and teardown] --&gt; |contains| B[Steps: encapsulate UI or API operations and verifications, and may be composed of other steps]\n    B --&gt; |contains| C[Configurations: can be per environment, such as dev, qa, staging, and contain URLs, users, authentication schemes, encryption, etc.]\n    B --&gt; |uses| D[Matchers: Hamcrest matchers for single objects or for iterables]\n    A --&gt; |contains| C\n    B --&gt; |uses| E[Models: domain objects]\n\n    subgraph Inheritance\n        A1[GenericTests] -.-&gt; |inherits| A2[Tests]\n        B1[GenericSteps] -.-&gt; |inherits| B2[Steps]\n        C1[AbstractConfiguration] -.-&gt; |inherits| C2[Configuration]\n    end\n</code></pre>"},{"location":"#extending-the-framework","title":"Extending the Framework","text":"<p>To add support for a new technology (e.g., messaging, database), create: - <code>MyTechConfiguration(BaseConfiguration)</code> - <code>MyTechSteps(GenericSteps[MyTechConfiguration])</code> - <code>MyTechTests(AbstractTestsBase[MyTechSteps, MyTechConfiguration])</code> This pattern ensures you reuse the core BDD, configuration, and reporting mechanisms.</p> <pre><code>classDiagram\n    %% Core Abstractions\n    class AbstractTestsBase {\n        &lt;&lt;abstract&gt;&gt;\n        +steps\n        +_configuration\n        +setup_method()\n        +teardown_method()\n    }\n    class GenericSteps {\n        &lt;&lt;abstract&gt;&gt;\n        +given\n        +when\n        +then\n        +and_\n        +with_\n        +retrying()\n        +eventually_assert_that()\n    }\n    class BaseConfiguration {\n        &lt;&lt;abstract&gt;&gt;\n        +parser\n    }\n\n    %% Technology-Specific Extensions\n    class RestTests\n    class RestSteps\n    class RestConfiguration\n\n    class SeleniumTests\n    class SeleniumSteps\n    class SeleniumConfiguration\n\n    %% Example: Custom Extension\n    class TerminalXTests\n    class TerminalXSteps\n    class TerminalXConfiguration\n\n    %% Relationships\n    AbstractTestsBase &lt;|-- RestTests\n    AbstractTestsBase &lt;|-- SeleniumTests\n    SeleniumTests &lt;|-- TerminalXTests\n\n    GenericSteps &lt;|-- RestSteps\n    GenericSteps &lt;|-- SeleniumSteps\n    SeleniumSteps &lt;|-- TerminalXSteps\n\n    BaseConfiguration &lt;|-- RestConfiguration\n    BaseConfiguration &lt;|-- SeleniumConfiguration\n    SeleniumConfiguration &lt;|-- TerminalXConfiguration\n\n    RestTests o-- RestSteps : uses\n    RestTests o-- RestConfiguration : configures\n\n    SeleniumTests o-- SeleniumSteps : uses\n    SeleniumTests o-- SeleniumConfiguration : configures\n\n    TerminalXTests o-- TerminalXSteps : uses\n    TerminalXTests o-- TerminalXConfiguration : configures\n\n    %% Example extension note\n    %% You can add new technologies by subclassing the three core abstractions:\n    %% AbstractTestsBase, GenericSteps, and BaseConfiguration.\n</code></pre> <p>Key Classes (with links to source code):</p> Class Description Source <code>AbstractTestsBase</code> Base for all test scenarios; holds steps and config abstract_tests_base.py <code>GenericSteps</code> Base for all step implementations; provides BDD keywords generic_steps.py <code>BaseConfiguration</code> Base for all configuration objects base_configuration.py <code>RestTests</code> REST-specific test base rest_tests.py <code>RestSteps</code> REST-specific steps rest_steps.py <code>RestConfiguration</code> REST-specific configuration rest_configuration.py <code>SeleniumTests</code> Selenium-specific test base selenium_tests.py <code>SeleniumSteps</code> Selenium-specific steps selenium_steps.py <code>SeleniumConfiguration</code> Selenium-specific configuration selenium_configuration.py <code>TerminalXTests</code> Example: custom UI test base terminalx_tests.py <code>TerminalXSteps</code> Example: custom UI steps terminalx_steps.py <code>TerminalXConfiguration</code> Example: custom UI configuration terminalx_configuration.py"},{"location":"#quick-start-locally-with-pdm","title":"\ud83d\ude80 Quick Start (Locally with PDM)","text":"<p>Open in Codespace or Dev Container and everything will get installed and configured, otherwise:</p> <ol> <li> <p>Install Python 3.13 on your system</p> </li> <li> <p>Install PDM:    <code>bash    pipx install pdm[all]</code></p> </li> <li> <p>Install dependencies:    <code>bash    pdm install</code></p> </li> <li> <p>Run all tests from the root:    <code>bash    pdm run pytest</code></p> </li> </ol>"},{"location":"#releasing","title":"\ud83e\uddea Releasing","text":"<ol> <li>branch</li> <li>commit changes</li> <li>pull request -- will trigger a build</li> <li> <p>build succeeds --&gt; tag with vX.X.X, e.g. v1.2.3 -- will trigger a release:</p> <p>4.1. ensure you are on main and up-to-date</p> <p>4.2. verify which tags exists in local repo <code>bash git tag</code> 4.3. create new tag, e.g. <code>v0.0.8</code> <code>bash git tag v0.0.8</code> 4.4. push it <code>bash git push origin v0.0.8</code></p> </li> <li> <p>verify new versions appeared on https://pypi.org/</p> </li> </ol>"},{"location":"#adding-a-new-package","title":"\ud83c\udfd7 Adding a New Package","text":"<pre><code>cd qa-automation-python\npdm plugin add pdm-init  # if not already available\npdm init  # or copy an existing module like qa-testing-utils\n</code></pre> <p>Then edit <code>pyproject.toml</code> accordingly.</p>"},{"location":"#reports","title":"Reports","text":"<ol> <li><code>report.html</code> is generated in the root folder; just open it in a browser</li> <li><code>allure-results/</code> is generated for Allure reporting (requires Allure server).    To view Allure reports, install Allure and run:    <code>bash    allure serve allure-results/</code></li> </ol>"},{"location":"#example-tests","title":"Example Tests","text":"<p>Below are example test cases demonstrating BDD-style usage with this framework:</p> <pre><code># Example: UI search test\n# (Assumes self.login_section and self._configuration.users are defined)\ndef should_find(self):\n    self.login_section(random.choice(self._configuration.users))\n    for word in [\"hello\", \"kitty\"]:\n        (self.steps\n            .when.searching_for(word)\n            .then.the_search_hints(\n                yields_item(contains_string_ignoring_case(word))))\n</code></pre> <pre><code># Example: API add test\ndef should_add(self):\n    random_pet = SwaggerPetstorePet.random()\n    (self.steps\n        .when.adding(random_pet)\n        .then.the_available_pets(yields_item(is_(random_pet))))\n</code></pre>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Python 3.13</li> <li>Google Chrome for local Selenium testing</li> <li>PDM (Python package manager)</li> </ul> TODO  - Add browser matrix support (Firefox, Safari, Edge) - Make the BDD intro words appear in Allure report - Extend test examples (API + UI)"},{"location":"#license","title":"\u2705 License","text":"<p>This project is licensed under the Apache 2.0 License.</p>"}]}